#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('WebSocket:server');
var http = require('http');
var sio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
//server.listen(port, 'localhost', function () {
//    console.log('This host is locahost and the port is ' + port);
//});
server.on('error', onError);
server.on('listening', onListening);

//var io = sio.listen(server);
//
//io.sockets.on('connection', function (socket) {
//
//    socket.on('addme', function (username) {
//        socket.username = username;
//        socket.emit('chat', 'SERVE', 'You have connected');
//        socket.broadcast.emit('chat', 'SERVER', username + ' is on deck.');
//    });
//
//    socket.on('sendchat', function (data) {
//        io.sockets.emit('chat', socket.username, data);
//    });
//
//    socket.on('disconnect', function () {
//        io.sockets.emit('chat', 'SERVER', socket.username + ' has left the building.');
//    });
//
//});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
